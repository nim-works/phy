# a simple bump-pointer allocator. Note: the global variables are initialized
# by the main procedure generated by skully, and thus they cannot be renamed
# without adjusting skully

var memoryLimit, nextMemoryPage: uint

proc osAllocPages(size: int): pointer {.inline.} =
  let size = uint(size)
  result = cast[pointer](nextMemoryPage)
  if nextMemoryPage + uint(size) > memoryLimit:
    raiseOutOfMem()

  nextMemoryPage += size

proc osTryAllocPages(size: int): pointer =
  if nextMemoryPage + uint(size) <= memoryLimit:
    osAllocPages(size)
  else:
    nil

proc osDeallocPages(p: pointer, size: int) {.inline.} =
  # if it's the last "page", simply reset the pointer, otherwise do nothing
  if cast[uint](p) + uint(size) == nextMemoryPage:
    nextMemoryPage = cast[uint](p)

proc roundup(x, v: int): int {.inline.} =
  ## Must be implemented here, otherwise the system module does not compile.
  result = (x + (v-1)) and not (v-1)
