## Provides the type definitions for the source languages.

# XXX: this module is going be auto-generated by the passtool in the future

import
  experimental/sexp,
  passes/trees,
  vm/utils

type
  NodeKind* {.pure.} = enum
    Immediate, IntVal, FloatVal

const
  ExprNodes* = {IntVal, FloatVal}
  AllNodes* = {low(NodeKind) .. high(NodeKind)}

template isAtom*(x: NodeKind): bool =
  ord(x) <= ord(FloatVal)

proc fromSexp*(tree: var PackedTree[NodeKind], kind: NodeKind,
               n: SexpNode): TreeNode[NodeKind] =
  case kind
  of IntVal:
    TreeNode[NodeKind](kind: kind, val: tree.pack(n[1].num))
  of FloatVal:
    TreeNode[NodeKind](kind: FloatVal, val: tree.pack(n[1].fnum))
  else:
    unreachable()

proc toSexp*(n: TreeNode[NodeKind]): SexpNode =
  case n.kind
  of Immediate: sexp(n.val.int)
  of IntVal:    sexp([newSSymbol("IntVal"), sexp n.val.int])
  of FloatVal:  sexp([newSSymbol("FloatVal"), sexp n.val.int])

proc fromSexp*(i: BiggestInt): TreeNode[NodeKind] =
  TreeNode[NodeKind](kind: Immediate, val: i.uint32)
